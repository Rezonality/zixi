tuning just		// choose a tuning (remember to use the ixi lang evaluation (Alt + right arrow)
scale minor		// set the scale


// melodic score
jimi     ->       string[1   2    6    2   ]  	// here we have an agent called jimi, playing four notes
jimi     ->       string[1   2    6    2   ]+12  	// same as above but transposed up an octave (MIDI notes)
jimi     ->       string[1   2    6    2   ]!16  	// ! 16 makes silence for 16 notes before playing again
jimi     ->       string[1   2    6    2   ]+12!16(12) // this can be combined - and alternating between whole and half notes
jimi     ->       string[1   2    6    2   ]+12(12~8) //  alternating between whole and half notes but note sustain is multiplied by 8

#midiclients	// want to send midi out to another app?
#midiout 2		// send out on bus 2


jarret  	-> 		midi[1   4   2  1      ]+12	// sending out midi on channel 1
jarret  	-> 		midi[1   4   2  1      ]c5 	// sending out midi info on channel 5

a -> (135)	// a chord can be defined in brackets and assigned to a character (one letter only)

jarret -> piano[1   3   5       a        ]	// the chord is then played inside the score

a -> $16 	// 16 semitones above the fundamental
b -> $24	// two octaves above
c -> (158ab)	// a chord with a tonic, a fifth, an octave, a third, and two octave above
bb -> piano[1 2 3 a b c c ]

// or as here below, jack a minor chord into a major scale

scale major
a -> $3
c -> (1a5)
d -> (135)
bb -> piano[1 2 a 3 4 5   c   d   ](1)

// percussive score
ringo    ->             |o   x    o    x   |	// here o is mapped to a bass drum and x to a snare drum
ringo2   ->             |      ii   s    n | (1148)	// here the notes get durations (two whole notes, a quarter and ab eigth)
ringo    ->             |c c c c           |!2^1219^		// expanded by two and the accents are of amplitude 1 2 1 and 9 (relative to general amp)
ringo4   ->             |       o o d sd   |!12	// ! 12 inserts silence for 12 beats

// concrÃ¨te score
pierre 	->     water{0        2   8         4    1 0       }	// numbers are amplitude
henry 	->     water{0        2   8         }!14	// last amp value is extended by 14 beats
schaeffer ->    water{0        2   8         }*4!14	// duration is multiplied by 4 and same as above

jimi ))  	// increase the volume of jimi
jimi >> delay 	// add one effect to jimi's output
jimi >> distort >> reverb  // put jimi through distortion and reverb effects
jimi << distort	// remove distortion but not the reverb effect
jimi << 	// remove all effects

shake jimi  	// scramble jimi's score
future 2:4 >> swap jimi 	// in 2 seconds time, swap jimi's score. Do this 4 times
future 2b:4 >> swap jimi 	// every 2 bars, swap jimi's score. Do this 4 times

tempo 60		// set the tempo
tempo 120:10	// set the tempo to 120 in 10 seconds

group funnyband -> ringo jimi 	// create a new group
doze band		// make the band stop
perk band 	// restart the bandmembers

sequence drumbo -> ringo ringo2	// create a new sequence of two sequences
snapshot -> one 	// take a snapshot of the agent states
snapshot one		// recall the snapshot

swap jimi  	// swap jimi's score
+ jimi 12 	// add 12 as an argument to the score (transposing octave up)
^ jimi 1842 	// setting the amplitude arguments of jimi

future 2b:12 >> + jimi 7 12 0 	// every 2 bars, transpose jimi's score to the tailing arguments
snapshot -> two 	// take a snapshot of the agent states
snapshot two		// recall the snapshot
future 3:12 >> snapshot 	// recall a random snapshot every 3 seconds (12 times)
autocode 4 	// create four lines of automatic code writing

